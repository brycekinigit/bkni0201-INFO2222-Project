<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %}
<h1>Login</h1>
<p>Username</p>
<input id="username" />
<p>Password</p>
<input id="password" type="password" />
<button onclick="login()">Log In</button>
<p><a href={{ url_for('signup') }}>Sign Up</a></p>

<script src="/static/js/libs/bcrypt.min.js"></script>
<script src="/static/js/message-encryption.js"></script>
<script>
    var bcrypt = dcodeIO.bcrypt;
    // basically checks if the server returns an Error message instead of a URL
    // this is a pretty terrible way of handling error generated by the server, but it works...
    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }

    // login function to, well, login...
    async function login() {
        // this fancy syntax is part of the Jinja syntax
        // login_user is a Python function, this gets the URL that calls that Python function
        // you know the one with the:
        // app.route("/login/user", methods=["POST"])
        // login_user()
        // so... "{{ url_for('login_user')}}" 
        // gives us -> "http://blabla/login/user"
        let loginURL = "{{ url_for('login_user') }}";

        const username = $("#username").val()
        let res = await axios.get("/user/password-message-salt/" + username, {
            username: username,
        });

        /*
    hasspecial = False
    hascapital = False
    for i in password:
        if not i.isalpha():
            hasspecial = True
        if i.isupper():
            hascapital = True
    if not hascapital:
        return "Error: Password must contain a capital letter."
    if not hasspecial:
        return "Error: Password must contain a non-alphabetic character."
    hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    password = "Some string to replace the real password"
    db.insert_user(username, hashed_password, password_client_salt)
        */

        const passwordSalt = res.data;
        const password = $("#password").val()
        const passwordHash = bcrypt.hashSync(password, passwordSalt)

        const messageKey = await aesKeyFromPassword(password, passwordSalt);
        const keyJSON = await keyToJSON(messageKey);
        sessionStorage.setItem("messageKey", JSON.stringify(keyJSON));

        // axios post is a fancy way of posting a request to the server,
        // we pass in the username and password here
        res = await axios.post(loginURL, {
            username: username,
            password: passwordHash,
        });

        // if the server sends in an error message, alert() the error message
        if (!isValidURL(res.data)) {
            alert(res.data);
            return;
        }
        Cookies.set("username", username);
        // redirects to the URL (ie. res.data),
        // we use _self here since we all hate that moment
        // when the browser opens a new tab
        window.open(res.data, "_self")
    }
</script>
{% endblock %}