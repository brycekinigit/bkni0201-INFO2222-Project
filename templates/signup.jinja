<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %}
<h1>Sign Up</h1>
<p>Username</p>
<input id="username" />
<p>Password</p>
<input id="password" type="password" />
<button onclick="signup()">Sign Up</button>
<p style="visibility: hidden;" id="capitalError"> Error: Password must contain a capital letter.</p>
<p style="visibility: hidden;" id="specialError"> Error: Password must contain a non-alphabetic character.</p>
<p><a href={{ url_for('login') }}>Log In</a></p>

<script src="/static/js/libs/bcrypt.min.js"></script>
<script src="/static/js/message-encryption.js"></script>
<script>
    var bcrypt = dcodeIO.bcrypt;
    function isValidURL(string) {
        if (string.length == 0) {
            return false;
        }
        if (string[0] == "/") {
            return true;
        }
        return false;
    }

    // this function is identical to login(), see login.jinja
    async function signup() {
        let loginURL = "{{ url_for('signup_user') }}"

        // resets elements after for next password check warnings
        document.getElementById("capitalError").style.visibility="hidden";
        document.getElementById("specialError").style.visibility="hidden";

        let password = $("#password").val()
        let hasspecial = false;
        let hascapital = false;

        for (let i = 0; i < password.length; i++)
        {
            // https://stackoverflow.com/a/9862788 (regex check if string is in alphabet)
            if (!password[i].match(/[a-z]/i))
            {
                hasspecial = true;
            }
            
            if (password[i].match(/[a-z]/i))
            {
                if (password[i] == password[i].toUpperCase())
                {
                    hascapital = true;
                }
            }
        }

        if (!hascapital)
        {
            // or load whatever error (maybe some txt in html)
            document.getElementById("capitalError").style.visibility="visible";
            console.log("Error: Password must contain a capital letter.");
            return;
        }

        if (!hasspecial)
        {
            // or load whatever error (maybe some txt in html)
            document.getElementById("specialError").style.visibility="visible";
            console.log("Error: Password must contain a non-alphabetic character.");
            return;
        }
        const passwordSalt = bcrypt.genSaltSync();
        const passwordHash = bcrypt.hashSync($("#password").val(), passwordSalt)
        
        // Generate public and private key from password
        
        const messageKey = await aesKeyFromPassword(password, passwordSalt);
        const keyJSON = await keyToJSON(messageKey);
        sessionStorage.setItem("messageKey", JSON.stringify(keyJSON));


        let res = await axios.post(loginURL, {
            username: $("#username").val(),
            password: passwordHash,
            passwordSalt: passwordSalt
        });
        if (!isValidURL(res.data)) {
            alert(res.data);
            return;
        }
        console.log("Computed hash: " + passwordHash);
        window.open(res.data, "_self")
    }
</script>
{% endblock %}